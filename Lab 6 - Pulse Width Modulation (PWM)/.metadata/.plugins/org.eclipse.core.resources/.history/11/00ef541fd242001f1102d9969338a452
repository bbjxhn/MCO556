#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"

volatile int updatedDutycycle; 
volatile bool SW2btn_press = false;
volataile bool SW3btn_press = false;

void delay(void)
{
    volatile uint32_t i = 0U;
    for (i = 0U; i < 1000000U; ++i) {
        __asm("NOP");
    }
}

void SW2_GPIOC_IRQHANDLER(void) {
	GPIO_PortClearInterruptFlags(GPIOC, 1U << 6U);
    SW2btn_press = true;
}

void SW3_GPIOA_IRQHANDLER(void) {
    SW3btn_press = true;
}

int main(void) {
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
#ifndef BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL
    BOARD_InitDebugConsole();
#endif

    PRINTF("Lab6_PWM_pinPTC2_2btn - John Trinidad");
    PRINTF("\nPWM signal of 10KHz is generated on pin PTC2 by FTM0 channel 1");
    PRINTF("\nPress SW2 to sweep the Dutycycle from 0% -> 100% -> 0% coninuously");
    PRINTF("\nPress SW3 to stop the process");

    while (1) {
        FTM_StartTimer(FTM0_PERIPHERAL, kFTM_SystemClock);

        if (SW2btn_press) {
            SW2btn_press = false;
            for (updatedDutycycle = 0; updatedDutycycle <= 100; updatedDutycycle += 10) {
                FTM_UpdatePwmDutycycle(FTM0_PERIPHERAL, kFTM_Chnl_1, kFTM_EdgeAlignedPwm, updatedDutycycle);
                FTM_SetSoftwareTrigger(FTM0_PERIPHERAL, true);
                delay();
            }

            for (updatedDutycycle = 100; updatedDutycycle <= 0; updatedDutycycle -= 10) {
                FTM_UpdatePwmDutycycle(FTM0_PERIPHERAL, kFTM_Chnl_1, kFTM_EdgeAlignedPwm, updatedDutycycle);
                FTM_SetSoftwareTrigger(FTM0_PERIPHERAL, true);
                delay();
            }
        }

        if (SW3btn_press) {
            SW3btn_press = false;
            FTM_StopTimer(FTM0_PERIPHERAL);
            updatedDutycycle = 0;
            PRINTF("\nFTM0 is stopped");
        }
    }

    return 0 ;
}
